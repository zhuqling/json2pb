#!/usr/bin/env node
'use strict';
var Json2pb = require(__dirname+"/../lib/json2pb.js");

var mod_getopt = require('posix-getopt'),
    pkg     = require('../package.json'),
    fs = require('fs'),
    cofs = require('co-fs'),
    co = require('co'),
    node_path = require('path'),
    ProtoBuf = require("protobufjs"),
    util = require('util');

function version()
{
    console.log("%s version %s", pkg['name'], pkg['version']);
}

function usage()
{
    console.error("Usage: %s [options] files\n", pkg['name']);
    console.error("Use %s --help for a list of options", pkg['name']);
}

function help()
{
    console.error("Usage: %s [options] files", pkg['name']);
    console.error("Options:");
    console.error("  -h, --help                   Display this information.");
    console.error("  -v, --version                Print the compiler version.");
    console.error("  -I, --include                Specify the directory in which to search for imports.");
    console.error("  -d, --dependency             Output a rule suitable for make describing the dependencies of the main source file.");
    console.error("  -o, --output                 Encode to the file.");
    console.error("  -m, --message                Set the message to be built.");
    console.error("  -p, --proto                  Specify the protobuf's .proto file.");
}

var isDescriptor = function(name) {
    return /^google\/protobuf\//.test(name);
};

var load = function(filename, options, loaded) {
    filename = node_path.resolve(filename);
    loaded = loaded || [];
    if (loaded.indexOf(filename) >= 0)
        return {};
    var data = null;
    try {
        data = ProtoBuf.DotProto.Parser.parse(fs.readFileSync(filename).toString("utf8"));
    } catch (error) {
        error.filename = filename;
        throw error;
    }
    loaded.push(filename);
    if (Array.isArray(data['imports'])) {
        var imports = data['imports'];
        for (var i=0; i<imports.length; i++) {
            // Skip pulled imports and legacy descriptors
            if (typeof imports[i] !== 'string' || isDescriptor(imports[i]))
                continue;
            // Merge imports, try include paths
            (function() {
                var path = options.path || [];
                for (var j=0; j<options.path.length; ++j) {
                    var import_filename = node_path.resolve(path[j] + "/", imports[i]);
                    if (!fs.existsSync(import_filename))
                        continue;
                    imports[i] = load(import_filename, options, loaded);
                    return;
                }
                throw Error("File not found: "+imports[i]);
            })();
        }
    }
    return data;
};

function* main(argv) {
    var parser, option;
    var output_file = null;
    var message = null;
    var dep_file = null;
    var builder = ProtoBuf.newBuilder({ convertFieldsToCamelCase: false });
    var path = [];
    var loaded = [];

    parser = new mod_getopt.BasicParser('v(version)h(help)I:(include)d:(dependency)o:(output)m:(message)p:(proto)', argv);
    while ((option = parser.getopt()) !== undefined) {
        switch (option.option) {
            case 'h':
                help();
                return 0;
            case 'v':
                version();
                return 0;
            case 'I':
                path.push(option.optarg);
                break;
            case 'd':
                dep_file = option.optarg;
                break;
            case 'o':
                output_file = option.optarg;
                break;
            case 'm':
                message = option.optarg;
                break;
            case 'p':
                var data = load(option.optarg, { path : path }, loaded);
                builder["import"](data, option.optarg);
                break;
            default:
                /* error message already emitted by getopt */
                return 1;
        }
    }
    builder.resolveAll();

    if(message == null) {
        console.error('Missing --message=[messsage to be built].');
        usage();
        return 1;
    }

    var root = builder.build();
    if(root == null)
    {
        console.error('Missing --proto=[protobuf .proto file].');
        usage();
        return 1;
    }

    if (parser.optind() >= argv.length) {
        console.error('Missing required argument: "file"');
        usage();
        return 1;
    }

    var json2pb = new Json2pb();
    var input_file = argv[parser.optind()];
    if(output_file == null) {
        if (input_file.substring(input_file.length - 5, input_file.length) == '.json') {
            output_file = input_file.substring(0, input_file.length - 5) + '.pb';
        } else {
            output_file = input_file + '.pb';
        }
    }

    var str = yield cofs.readFile(input_file, 'utf8');
    //JSON.parse()有64位整数溢出bug
    var jo = JSON.parse(str);
    var T = root[message];
    var pbobj = json2pb.jsonDecode(jo, T);
    var byteBuffer = pbobj.encode(true);
    var buffer = byteBuffer.toBuffer();
    yield cofs.writeFile(output_file, buffer);
    yield cofs.chmod(output_file, 438);

    if(dep_file) {
        var dep = "";
        dep += util.format("%s:\\\n", output_file );
        for(var file of loaded) {
            dep += util.format("    %s\\\n", file);
        }
        dep += '\n';
        yield cofs.writeFile(dep_file, dep);
        yield cofs.chmod(dep_file, 438);
    }

    return 0;
};


co(function* () {
    var result = yield main(process.argv);
    return result;
}).then(function (result) {
    process.exit(result);
}, function (err) {
    if(err.filename) {//解析protobuf时候的错误
        console.error('Error: ' + err.filename + ':' + err.message);
    } else if(err.jo) {//解析json时候的错误
        var o = {};
        var i = 0;
        for(var field in err.jo) {
            if(typeof err.jo[field] == "object") {
                continue;
            }
            if(i > 5) {
                break;
            }
            o[field] = err.jo[field];
            ++i;
        }
        var str = JSON.stringify(o);
        str = str.substring(0, str.length - 1);
        str += '........' + '}';
        console.error('Error: ' + err.message + '.\t\t' + str);
    } else {
        console.error('Error: ' + err.message);
    }
    process.exit(1);
});
